var fast_speed_data = [
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 9900, 9900, 9900, 9900, 9900,
	9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 6524, 6524, 6524, 6524, 6524,
	6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524,
	6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
	6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
	6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6524,
	6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524,
	6524, 6524, 6524, 6524, 6750, 6750, 6750, 6750, 6750, 6750,
	6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 9900,
	9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
	9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
	9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
	9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
	9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
	9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 900,
	2836, 892, 892, 892, 892, 892, 892, 892, 892, 892,
	892, 892, 892, 892, 892, 892, 1116, 1116, 1116, 1116,
	1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
	1116, 892, 892, 892, 892, 892, 892, 892, 892, 892,
	892, 892, 892, 892, 892, 892, 1116, 1116, 1116, 1116,
	1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
	1116, 892, 892, 892, 892, 892, 892, 892, 892, 892,
	892, 892, 892, 2240, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 5400, 5400, 5400,
	5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400,
	5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400,
	5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400,
	5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400,
	5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400,
	5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400,
	5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400, 5400,
	5400, 5400, 11924, 11924, 11924, 11924, 11924, 11924, 11924, 11924,
	11924, 11924, 11924, 11924, 11924, 11924, 11924, 12150, 12150, 12150,
	12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150,
	12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150,
	12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150,
	12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150,
	12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150, 12150,
	12150, 12150, 12150, 12150, 12150, 12150, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900, 9900,
	9900, 9900, 9900, 9900, 9900, 9900, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 9826, 3728, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1122, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 10, 0,
	0, 0, 664, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 7862, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 9898,
	9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898,
	9898, 9898, 9898, 9898, 10124, 10124, 10124, 10124, 10124, 10124,
	10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 10124, 6524,
	6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524,
	6524, 6524, 6524, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
	6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
	6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
	6750, 6750, 6750, 6524, 6524, 6524, 6524, 6524, 6524, 6524,
	6524, 6524, 6524, 6524, 6524, 6524, 6524, 6524, 6750, 6750,
	6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750, 6750,
	6750, 6750, 6750, 9898, 9898, 9898, 9898, 9898, 9898, 9898,
	9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898,
	9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898,
	9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898,
	9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898,
	9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898,
	9898, 9898, 8420, 1244, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 1032, 1124,
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
	1124, 1124, 962, 1122, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 1092, 1124,
	1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124,
	1124, 1124, 902, 1122, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 3626, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 11922, 11922, 11922, 11922,
	11922, 11922, 11922, 11922, 11922, 11922, 11922, 11922, 11922, 11922,
	12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146,
	12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146,
	12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146,
	12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146,
	12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146,
	12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146, 12146,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122,
	10122, 10122, 10122, 10122, 10122, 9898, 9898, 9898, 9898, 9898,
	9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898, 9898,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 9358,
	0, 5666, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 344, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 554, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 450, 450, 450, 450,
	450, 450, 450, 450, 450, 450, 450, 450, 450, 450,
	450, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 6820, 10122,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122,
	10122, 10122, 10122, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 10122, 10122,
	10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122, 10122,
	10122, 10122, 10122, 6522, 6522, 6522, 6522, 6522, 6522, 6522,
	6522, 6522, 6522, 6522, 6522, 6522, 6522, 6748, 6748, 6748,
	6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748,
	6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748,
	6748, 6748, 6748, 6748, 6748, 6748, 6748, 6522, 6522, 6522,
	6522, 6522, 6522, 6522, 6522, 6522, 6522, 6522, 6522, 6522,
	6522, 6522, 6748, 6748, 6748, 6748, 6748, 6748, 6748, 6748,
	6748, 6748, 6748, 6748, 6748, 6748, 6748, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9220, 900, 1898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 1122, 1122, 1122, 1122, 1122, 1122,
	1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 1122, 1122, 1122, 1122, 1122, 1122,
	1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 1122, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 2970, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824, 3824,
	3824, 3824, 3824, 3824, 3824, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398, 5398,
	11920, 11920, 11920, 11920, 11920, 11920, 11920, 11920, 11920, 11920,
	11920, 11920, 11920, 11920, 12145, 12145, 12145, 12145, 12145, 12145,
	12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145,
	12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145,
	12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145,
	12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145,
	12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145, 12145,
	12145, 12145, 12145, 12145, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 8898, 0, 821, 7186, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1861,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 833, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 449, 449, 449, 449, 449, 449, 449, 449, 449,
	449, 449, 449, 449, 449, 449, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 898,
	898, 898, 4941, 10121, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 10121, 10121, 10121, 10121, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121,
	10121, 10121, 10121, 10121, 10121, 10121, 10121, 6522, 6522, 6522,
	6522, 6522, 6522, 6522, 6522, 6522, 6522, 6522, 6522, 6522,
	6522, 6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747,
	6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747,
	6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747,
	6747, 6522, 6522, 6522, 6522, 6522, 6522, 6522, 6522, 6522,
	6522, 6522, 6522, 6522, 6522, 6522, 6747, 6747, 6747, 6747,
	6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747, 6747,
	6747, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896, 9896,
	9671, 900, 900, 3339, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 898, 898, 898, 898, 1123,
	1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123,
	1123, 1123, 1123, 1123, 898, 898, 898, 898, 898, 898,
	898, 898, 898, 898, 898, 1526, 3823, 3823, 3823, 3823,
	3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
	3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
	3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
	3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
	3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
	3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823,
	3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 3823, 5398,
	5398, 
];

var slow_speed_data = [
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 700,
	700, 700, 700, 700, 700, 700, 700, 700, 700, 700,
	700, 700, 700, 700, 700, 700, 700, 700, 700, 700,
	700, 700, 700, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 700, 700, 700,
	700, 700, 700, 700, 700, 700, 700, 700, 700, 700,
	700, 700, 700, 700, 700, 700, 700, 700, 700, 700,
	700, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 7412, 7412, 7412, 7412, 7412, 7412,
	7412, 7412, 7412, 7412, 7412, 7412, 7412, 7412, 7412, 7412,
	7412, 7412, 7412, 7412, 7412, 7412, 7412, 7412, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 1568, 0,
	0, 0, 0, 474, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 602, 132, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 576,
	12, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 568, 376, 0, 0, 0, 0, 0,
	0, 0, 564, 564, 564, 294, 0, 0, 0, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 700, 700, 700,
	700, 700, 700, 700, 700, 700, 700, 700, 700, 700,
	700, 700, 700, 700, 700, 700, 700, 700, 700, 700,
	700, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 700, 700, 700, 700, 700,
	700, 700, 700, 700, 700, 700, 700, 700, 700, 700,
	700, 700, 700, 700, 700, 700, 700, 700, 700, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378, 2378,
	2378, 2378, 2378, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356, 3356,
	3356, 3356, 7412, 7412, 7412, 7412, 7412, 7412, 7412, 7412,
	7412, 7412, 7412, 7412, 7412, 7412, 7412, 7412, 7412, 7412,
	7412, 7412, 7412, 7412, 7412, 7412, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552, 7552,
	7552, 7552, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 1420, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 576, 576, 326, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 564, 564,
	564, 564, 564, 564, 12, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 280,
	280, 280, 280, 280, 280, 280, 280, 280, 280, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 560, 560, 560,
	560, 560, 560, 560, 560, 560, 560, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154, 6154,
	6154, 6154, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294, 6294,
	6294, 6294, 6294, 6294, 6294, 6294, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196,
	4196, 4196, 4196, 4196, 4196, 4196, 4196, 4196, 4056, 4056,
	4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056, 4056,
	4056, 
];

var nextSegmentNo = 0;
var currentSegment = "";

function addSegment() {
    const segmentNo = nextSegmentNo + 1;
    nextSegmentNo += 1;
    const segmentId = `segment_${segmentNo}`;

    const segmentHTML = `
        <div class="segment" id="${segmentId}">
            <label for="${segmentId}_iceTime">用冰时机：</label>
            <input type="number" id="${segmentId}_iceTime" value="0" placeholder="0">
            <label for="${segmentId}_cobTime">激活时机：</label>
            <input type="number" id="${segmentId}_cobTime" value="316" placeholder="316">
            <label for="${segmentId}_throwTime">投掷时机：</label>
            <input type="text" id="${segmentId}_throwTime" value="w+1:~" placeholder="w+1:~">
            <label for="${segmentId}_fodderTime">垫材时机：</label>
            <input type="text" id="${segmentId}_fodderTime" value="" placeholder="">
            <label for="${segmentId}_fodderTime">计算时机：</label>
            <input type="text" id="${segmentId}_analyzeTime" value="w+3:~" placeholder="w+3:~">
            <button onclick="removeSegment('${segmentId}')">删除</button>
            <br/>
            <p id="${segmentId}_waveLenText">波长：</p>
            <p id="${segmentId}_resultText">目前没有计算结果</p>
        </div>`;

    document.getElementById('segments').insertAdjacentHTML('beforeend', segmentHTML);
}

function removeSegment(segmentId) {
    const segment = document.getElementById(segmentId);
    segment.remove();
}

/**
 * 这是一个表示时间信息的结构。
 * @typedef {Object} WaveTime
 * @property {number?} wave - 波次
 * @property {number?} time - 时间
 * @property {boolean} valid - 是否有效
 * @property {string} type - 时间模式，为"auto"表示自动推导
 * @property {boolean?} special - 是否特殊（投掷时间的植物激活）
 */

/**
 * 这是一个表示波次信息的结构。
 * @typedef {Object} WaveInfo
 * @property {number} ice - 用冰时间
 * @property {number} cob - 本波激活时间
 * @property {WaveTime} throw_info - 本波红眼投掷时间
 * @property {[WaveTime]} fodder_info - 本波红眼需要计算的时间
 * @property {[WaveTime]} analyze_info - 本波红眼需要计算的时间
 */

/**
 * 这是一个表示巨人信息的结构。
 * @typedef {Object} GigaInfo
 * @property {number} pos - 当前位置
 * @property {number} phase - 巨人相位，-1表示投掷中，-2表示锤垫中
 * @property {number} freeze - 剩余冰冻时间
 * @property {number} slow - 剩余减速时间
 * @property {number} throw - 投掷进度
 * @property {number} smash - 锤垫进度
 * @property {boolean} slow_skip - 下一帧是否需要跳过
 * @property {[number]} walk_formula - 用于验证的行走时间
 */


/**
 * 将一个数字转换为保留三位小数的浮点数。
 * @param {Number} num 
 * @returns 
 */
function to_str(num) {
    return `${Math.round(num * 1000) / 1000}`;
}

/**
 * 将形如 "w+1:316" 形式的字符串转为 WaveTime 结构。
 * @param {string} str - 输入字符串
 * @returns {WaveTime} - 转换结果
 */
function parseTime(str) {
    var special = false;
    var type = "normal";
    if (str.endsWith("*")) {
        special = true;
        str = str.substring(0, str.length - 1);
    }
    if (str == "") return { valid: false };

    var [wave, time] = str.split(':');
    // 如果没有分号，可能是本波内的时机
    if (time === undefined) {
        if (str == "~") {
            return { wave: 0, time: 0, valid: true, type: "auto", special: special };
        } else if (str[0] == "~" && (str[1] == "+" || str[1] == "-") && !isNaN(Number(str.substring(1)))) {
            return { wave: 0, time: Number(str.substring(1)), valid: true, type: "auto", special: special };
        } else if (!isNaN(Number(str))) {
            return { wave: 0, time: Number(str), valid: true, type: "normal", special: special };
        } else {
            return { valid: false };
        }
    }
    var wave_num = NaN, time_num = NaN;

    // wave 格式为 w or w+x
    if (wave.length < 1 || wave[0] != 'w') return { valid: false };
    else if (wave == "w") wave_num = 0;
    else if (wave.length < 2 || wave[1] != "+") return { valid: false };
    else wave_num = Number(wave.substring(2));

    // time 是一个数字或~
    if (time == "~" || time == "-") {
        type = "auto";
        time_num = 0;
    } else if (time[0] == "~" && (time[1] == "+" || time[1] == "-") && !isNaN(Number(time.substring(1)))) {
        type = "auto";
        time_num = Number(time.substring(1));
    } else {
        time_num = Number(time);
    }

    // 任一无效则返回 { valid: false }
    if (isNaN(wave_num) || isNaN(time_num)) return { valid: false };
    else return { wave: wave_num, time: time_num, valid: true, type: type, special: special };
}

/**
 * 将形如 "w+1:316 w+3:316" 形式的字符串转为 WaveTime 结构的列表。
 * @param {string} str - 输入字符串
 * @returns {[WaveTime]} 转换结果
 */
function parseMultiTime(str) {
    var result = [];
    for (var i of str.split(" ")) {
        var t = parseTime(i);
        if (t.valid) result.push(t);
    }
    return result;
}

/**
 * 收集输入的信息，确定当前波次
 * @returns {{success: boolean, infos?: [WaveInfo]}}
 */
function collectInfo() {
    const segments = document.querySelectorAll('.segment');
    var infos = [];
    var fail = false;
    segments.forEach(segment => {
        var info = {
            ice: Number(document.getElementById(`${segment.id}_iceTime`).value),
            cob: Number(document.getElementById(`${segment.id}_cobTime`).value),
            throw_info: parseTime(document.getElementById(`${segment.id}_throwTime`).value),
            fodder_info: parseMultiTime(document.getElementById(`${segment.id}_fodderTime`).value),
            analyze_info: parseMultiTime(document.getElementById(`${segment.id}_analyzeTime`).value)
        };
        // 顺便计算一下波长
        document.getElementById(`${segment.id}_waveLenText`).textContent = `波长：${info.cob < 401 ? 601 : info.cob + 200}`
        // throw_info无效时，可能是被瞬杀，不视作失败
        if (isNaN(info.ice) || isNaN(info.cob)) {
            document.getElementById(`${segment.id}_resultText`).textContent = "本波数据存在问题"
            fail = true;
        } else {
            document.getElementById(`${segment.id}_resultText`).textContent = ""
            infos.push(info);
        }
    });
    console.log(infos);
    if (fail || infos.length == 0) {
        return { success: false };
    } else {
        return { success: true, infos: infos };
    }
}

/**
 * 根据波次信息，提取对应波次遭遇的所有事件。
 * @param {{success: boolean, infos?: [WaveInfo]}} input_info 
 * @returns {[{type: string, time: number, info: string?}]}
 */
function extractEvents(input_info, current_wave_no) {
    var infos = input_info.infos.slice();
    // 提取出其中存在的事件
    // 支持以下事件：冰冻、投掷、锤垫（目前认为垫材秒铲）、统计
    var original_length = infos.length;
    var events = [];
    var waiting_events = [];
    var current_info = infos[current_wave_no];
    var max_analyze = 0;
    // 提取投掷信息
    var throw_time = current_info.throw_info;
    if (throw_time.valid) {
        if (throw_time.special) {
            waiting_events.push({
                wave: throw_time.wave,
                time: throw_time.time,
                time_type: throw_time.type,
                type: "throw-ash"
            }); 
        } else {
            waiting_events.push({
                wave: throw_time.wave,
                time: throw_time.time,
                time_type: throw_time.type,
                type: "throw"
            });
        }
    }
    // 提取锤垫信息
    for (var t of current_info.fodder_info) {
        waiting_events.push({
            wave: t.wave,
            time: t.time,
            time_type: t.type,
            type: "fodder"
        });
    }
    // 提取统计信息
    for (var t of current_info.analyze_info) {
        // cob模式的时间后续会被覆盖，这里是什么无所谓
        var info = `w+${t.wave}:${t.time}${t.special ? "*" : ""}`;
        if (t.type == "auto") {
            if (t.time == 0) info = `w+${t.wave}:~${t.special ? "*" : ""}`;
            else if (t.time > 0) info = `w+${t.wave}:~+${t.time}${t.special ? "*" : ""}`;
            else if (t.time < 0) info = `w+${t.wave}:~${t.time}${t.special ? "*" : ""}`;
        }
        waiting_events.push({
            wave: t.wave,
            time: t.time - (t.special ? 1 : 0),
            time_type: t.type,
            type: "analyze",
            info: info
        });
        max_analyze = Math.max(max_analyze, t.wave);
    }
    console.log(waiting_events);
    // 提取冰信息
    var current_wave_start = 0;
    for (var i = current_wave_no; i <= current_wave_no + max_analyze; i++) {
        // 波次不足则补全
        if (i >= infos.length) infos.push(infos[i % original_length]);
        var info = infos[i];
        // 冰冻事件
        if (info.ice > 0) events.push({ type: "ice", time: current_wave_start + info.ice });
        // 将之前的换算为时间点
        for (var evt of waiting_events) {
            if (evt.wave == i - current_wave_no) {
                if (evt.type == "analyze" && evt.time_type == "auto") {
                    evt.info = evt.info.replace("~", info.cob.toString());
                }
                var converted_evt =  {
                    type: evt.type,
                    time: current_wave_start + (evt.time_type == "auto" ? (evt.time + info.cob) : evt.time),
                    info: evt.info
                };
                events.push(converted_evt);
            }
        }
        current_wave_start += ((info.cob < 401) ? 601 : (info.cob + 200));
    }
    events.sort((a, b) => a.time - b.time);
    console.log(events);
    return events;
}

/**
 * 生成一个巨人信息
 * @param {number} pos - 巨人初始位置
 * @returns {GigaInfo}
 */
function generateGiga(pos) {
    return {
        // 当前位置
        pos: pos,
        // 巨人相位
        phase: 0,
        // 剩余冰冻时间
        freeze: 0,
        // 剩余减速时间
        slow: 0,
        // 投掷进度
        throw: 0,
        // 锤垫进度
        smash: 0,
        // 这里采用简化算法：减速时，第一帧原速运动，第二帧无动作
        // 此处记录下一个减速帧是否使用此算法
        slow_skip: false,
        // 计算行走时间用于验证
        walk_formula: [0]
    };
}

/**
 * 步进一步巨人状态
 * @param {GigaInfo} giga 
 * @param {boolean} slow
 */
function gigaStep(giga, slow) {
    // 垫材与激活的测试：
    // 灰烬激活时，垫材在激活上一帧种植，先投掷后锤垫
    // 炮激活时，垫材在激活上一帧种植，先锤垫后投掷
    // 灰烬激活本帧：结算植物（灰烬激活）-结算僵尸（同时激活+索敌，选投掷）-结算炮弹（无）
    // 炮激活本帧，垫材tick为208，激活tick为143
    // 灰烬激活本帧：结算植物（无）-结算僵尸（索敌，选锤垫）-结算炮弹（激活）
    // 本帧植物没有什么好结算的
    // 结算僵尸
    // 两个减速tick减1
    if (giga.freeze > 0) giga.freeze -= 1;
    if (giga.slow > 0) giga.slow -= 1;
    if (giga.freeze == 0) {
        // 非冰冻状态下，进行索敌
        if (giga.phase >= 0) {
            if (giga.throw == 142) {
                giga.phase = -1;
                giga.slow_skip = false;
            } else if (giga.smash == 208) {
                giga.phase = -2;
                giga.slow_skip = false;
            }
        }
        // 非冰冻、非跳过状态下，进行移动
        if (!(giga.slow && giga.slow_skip)) {
            if (giga.phase >= 0) {
                if (slow) giga.pos -= slow_speed_data[giga.phase] / 32768;
                else giga.pos -= fast_speed_data[giga.phase] / 32768;
                giga.walk_formula[giga.walk_formula.length - 1] += 1;
                giga.phase += 1;
            } else if (giga.phase == -1) {
                giga.throw -= 1;
                if (giga.throw == 0) {
                    giga.phase = 0;
                    if (giga.walk_formula[giga.walk_formula.length - 1] != 0) {
                        giga.walk_formula.push(0);
                    }
                }
            } else if (giga.phase == -2) {
                giga.smash -= 1;
                if (giga.smash == 0) {
                    giga.phase = 0;
                    if (giga.walk_formula[giga.walk_formula.length - 1] != 0) {
                        giga.walk_formula.push(0);
                    }
                }
            }
            if (giga.slow) giga.slow_skip = true;
            else giga.slow_skip = false;
        } else {
            giga.slow_skip = false;
        }
    }
    // 结算本帧炮弹和下一帧植物
    if (giga.phase >= 0 && giga.throw > 142) giga.throw -= 1;
    if (giga.phase >= 0 && giga.smash > 208) giga.smash -= 1;
}

function calculateOne(input_info, segment_id, segment_no) {
    const events = extractEvents(input_info, segment_no);

    var analyze = false;
    var analyze_str = "";
    var result_str = "";
    var fast_giga = generateGiga(845);
    var slow_giga = generateGiga(854);

    // 为计算可以砸扁举锤坐标为多少的植物，对每个坐标维护一个计数器，只在冻结时不动作
    // 当冰冻事件与投掷+106cs(-36cs)事件同时发生时，进入ice3
    // 投掷共142cs，锤垫共208cs
    var smash_countdown_for_pos = [];
    for (var i = 0; i <= 800; i++) {
        smash_countdown_for_pos.push(-1);
    }
    var max_event_time = 0;
    if (events.length > 0) max_event_time = events[events.length - 1].time;
    // 巨人需要一帧索敌垫材，xcs的垫x+1cs才举锤
    for (var time = 1; time <= max_event_time; time++) {
        analyze = false;
        analyze_str = "";
        // 先查看当前帧事件
        for (var evt of events) {
            if (time == evt.time) {
                switch (evt.type) {
                    case "throw":
                        // 炮激活时，先结算僵尸再结算炮弹，因此下帧才开始投掷动作
                        fast_giga.throw = 143;
                        slow_giga.throw = 143;
                        break;
                    case "throw-ash":
                        // 灰烬激活时，先结算植物再结算僵尸，本帧就开始投掷动作
                        fast_giga.throw = 142;
                        slow_giga.throw = 142;
                        break;
                    case "fodder":
                        // 似乎因为僵尸需要一帧索敌，下一帧才会开始举锤
                        fast_giga.smash = 209;
                        slow_giga.smash = 209;
                        break;
                    case "ice":
                        // 减速信息与投掷信息全场同步，无需考虑
                        if (fast_giga.throw == 37 && (!fast_giga.slow || !fast_giga.slow_skip)) {
                            fast_giga.throw += 142;
                        }
                        if (fast_giga.slow > 0) {
                            fast_giga.freeze = 300;
                            slow_giga.freeze = 400;
                        } else {
                            fast_giga.freeze = 400;
                            slow_giga.freeze = 600;
                        }
                        fast_giga.slow = slow_giga.slow = 2000;
                        break;
                    case "analyze":
                        analyze = true;
                        analyze_str = evt.info;
                        break;
                }
            }
        }
        gigaStep(fast_giga, false);
        gigaStep(slow_giga, true);
        if (analyze) {
            var fast_safe = 845;
            for (var i = 0; i < fast_giga.walk_formula.length; i++) {
                if (i == fast_giga.walk_formula.length - 1) {
                    for (var j = 0; j < fast_giga.walk_formula[i] - 134; j++) {
                        fast_safe -= fast_speed_data[j] / 32768;
                    }
                } else {
                    for (var j = 0; j < fast_giga.walk_formula[i]; j++) {
                        fast_safe -= fast_speed_data[j] / 32768;
                    }
                }
            }
            if (result_str.length != 0) result_str += "<br>";
            result_str += `(${analyze_str}: [${to_str(fast_giga.pos)},${to_str(slow_giga.pos)}] `;
            result_str += `WF=[${fast_giga.walk_formula}] `;
            result_str += `SAFE=${Math.round(fast_safe * 1000) / 1000})`;
        }
    }
    document.getElementById(`${segment_id}_resultText`).innerHTML = result_str;
}

function calculateAll() {
    const input_info = collectInfo();
    if (!input_info.success) return;
    const segments = document.querySelectorAll('.segment');
    var segment_no = 0;
    segments.forEach(segment => {
        calculateOne(input_info, segment.id, segment_no);
        segment_no += 1;
    });
}

function runSplitter() {
    var total_time = Number(document.getElementById("splitter_input").value);
    var walk_len = [{ walk: 0, split: [0] }];
    for (var i = 1; i <= total_time; i++) {
        walk_len.push({ walk: walk_len[i - 1].walk + fast_speed_data[i - 1] / 32768, split: [i] });
    }
    var raw_wd = walk_len[total_time].walk;
    var result = `(FC:0, WD:${to_str(raw_wd)})`;
    var last_split_len = walk_len, now_split_len = []
    for (var fodder_count = 1; fodder_count * 208 < total_time; fodder_count++) {
        for (var current_time = 0; current_time <= total_time - fodder_count * 208; current_time++) {
            var min_val = 1000, min_val_i = -1;
            for (var i = 0; i <= current_time; i++) {
                var val = last_split_len[i].walk + walk_len[current_time - i].walk;
                if (val < min_val) {
                    min_val = val;
                    min_val_i = i;
                }
            }
            var item = { walk: min_val, split: last_split_len[min_val_i].split.slice() };
            item.split.push(current_time - min_val_i);
            now_split_len.push(item);
        }
        result += `<br>(FC:${fodder_count}, `;
        var wd = now_split_len[total_time - fodder_count * 208].walk;
        result += `WD:${to_str(wd)}[${to_str(wd - raw_wd)}], `
        result += `SP:${now_split_len[total_time - fodder_count * 208].split}) `;
        last_split_len = now_split_len;
        now_split_len = [];
    }
    document.getElementById("splitter_output").innerHTML = result;
}

function setRangerEnable() {
	var scene = document.getElementById("ranger_scene_select").value;
	var explosive_type = document.getElementById("ranger_explosive_select").value;
	if (scene == "RE/ME" && explosive_type == "Cob") {
		document.getElementById("ranger_input_cobcol").hidden = false;
		document.getElementById("ranger_input_cobcol_tag").hidden = false;
	} else {
		document.getElementById("ranger_input_cobcol").hidden = true;
		document.getElementById("ranger_input_cobcol_tag").hidden = true;
	}
	if (explosive_type == "Cob") {
		document.getElementById("ranger_input_col").step = 0.0125;
	} else {
		document.getElementById("ranger_input_col").step = 1;
	}
}

function getZombieCollision(zombie_type) {
	var zombie_x_offset = 0, zombie_x_width = 0;
	var zombie_y_offset = 0, zombie_y_width = 0;

	if (zombie_type == "Giga") {
		zombie_x_offset = -17;
		zombie_x_width = 125;
		zombie_y_offset = -38;
		zombie_y_width = 154;
	} else if (zombie_type == "Zomboni") {
		zombie_x_offset = 0;
		zombie_x_width = 153;
		zombie_y_offset = -13;
		zombie_y_width = 140;
	} else if (zombie_type == "Digger") {
		zombie_x_offset = 50;
		zombie_x_width = 28;
		zombie_y_offset = 0;
		zombie_y_width = 115;
	} else if (zombie_type == "DiggerToRight") {
		zombie_x_offset = 42;
		zombie_x_width = 28;
		zombie_y_offset = 0;
		zombie_y_width = 115;
	} else if (zombie_type == "Balloon") {
		zombie_x_offset = 36;
		zombie_x_width = 42;
		zombie_y_offset = -30;
		zombie_y_width = 115;
	} else if (zombie_type == "Football") {
		zombie_x_offset = 50;
		zombie_x_width = 57;
		zombie_y_offset = 0;
		zombie_y_width = 115;
	} else if (zombie_type == "Snorkel") {
		zombie_x_offset = 12;
		zombie_x_width = 62;
		zombie_y_offset = 0;
		zombie_y_width = 115;
	} else if (zombie_type == "DolphinAfterJump") {
		zombie_x_offset = 20;
		zombie_x_width = 42;
		zombie_y_offset = 0;
		zombie_y_width = 115;
	} else if (zombie_type == "Bungee") {
		zombie_x_offset = -20;
		zombie_x_width = 110;
		zombie_y_offset = 22;
		zombie_y_width = 94;
	} else if (zombie_type == "Normal") {
		zombie_x_offset = 36;
		zombie_x_width = 42;
		zombie_y_offset = 0;
		zombie_y_width = 115;
	}

	return [zombie_x_offset, zombie_x_width, zombie_y_offset, zombie_y_width];
}

function runRoofRanger() {
	var explosive_row = Number(document.getElementById("ranger_input_row").value);
	var explosive_col = Number(document.getElementById("ranger_input_col").value);
	var cob_col = Number(document.getElementById("ranger_input_cobcol").value);
	var explosive_type = document.getElementById("ranger_explosive_select").value;
	var zombie_type = document.getElementById("ranger_type_select").value;

	var center_x = 0, center_y = 0, range = 0;
	var lower_row_limit = 1, upper_row_limit = 5, scene_row_count = 5;
	var zombie_x_offset = 0, zombie_x_width = 0;
	var zombie_y_offset = 0, zombie_y_width = 0;

	var notation_ex = -1000;

	if (explosive_type == "Cob") {
		center_x = Math.floor(explosive_col * 80);
		center_y = 209 + (explosive_row - 1) * 85;
	
		if (center_x >= 527) {
			center_y -= 100;
		} else if (center_x >= 207)  {
			center_y -= Math.floor((center_x - 127) / 80) * 20;
		}
	
		var left_edge, right_edge, step2_shift;
		if (cob_col == 1) {
			left_edge = 87;
			right_edge = 524;
			step2_shift = 0;
		} else if (cob_col >= 7) {
			left_edge = 510;
			right_edge = 523;
			step2_shift = 5;
		} else {
			left_edge = 80 * cob_col - 13;
			right_edge = 524;
			step2_shift = 5;
		}
	
		var step2;
		if (center_x <= left_edge) {
			step2 = 0;
		} else if (center_x >= right_edge) {
			step2 = Math.floor((right_edge - left_edge + 3) / 4) - step2_shift;
		} else {
			step2 = Math.floor((center_x - left_edge + 3) / 4) - step2_shift;
		}
		center_y -= step2;
	
		if (center_x == left_edge && cob_col >= 2 && cob_col <= 6) {
			if (cob_row >= 3 && cob_row <= 5) {
				center_y += 5;
			}
			if (cob_row == 3 && cob_col == 6) {
				center_y -= 5;
			}
		}
	
		center_y = Math.max(center_y, 0);
		center_x -= center_x >= 7 ? 7 : 6;

		range = 115;
		lower_row_limit = explosive_row - 1;
		upper_row_limit = explosive_row + 1;
	} else if (explosive_type == "Cherry") {
		center_x = Math.floor(explosive_col * 80);
		center_y = 110 + (explosive_row - 1) * 85;
		if (center_x < 480) center_y += (480 - center_x) / 4;
		range = 115;
		lower_row_limit = explosive_row - 1;
		upper_row_limit = explosive_row + 1;
	} else if (explosive_type == "Doom") {
		center_x = Math.floor(explosive_col * 80);
		center_y = 110 + (explosive_row - 1) * 85;
		if (center_x < 480) center_y += (480 - center_x) / 4;
		range = 250;
		lower_row_limit = explosive_row - 3;
		upper_row_limit = explosive_row + 3;
	}

	console.log(center_x, center_y);

	const hit = function(zombie_x, zombie_y) {
		if (zombie_x + zombie_x_offset > 800) return false;
		var left = zombie_x + zombie_x_offset;
		var right = left + zombie_x_width;
		var up = zombie_y + zombie_y_offset;
		var down = up + zombie_y_width;
		if (center_x >= left && center_x <= right) {
			return Math.abs(up - center_y) <= range || Math.abs(down - center_y) <= range;
		} else if (center_y >= up && center_y <= down) {
			return Math.abs(left - center_x) <= range || Math.abs(right - center_x) <= range;
		} else {
			var x_diff = Math.min(Math.abs(left - center_x), Math.abs(right - center_x));
			var y_diff = Math.min(Math.abs(up - center_y), Math.abs(down - center_y));
			return Math.sqrt(x_diff * x_diff + y_diff * y_diff) <= range;
		}
	};
	
	[zombie_x_offset, zombie_x_width, zombie_y_offset, zombie_y_width] = getZombieCollision(zombie_type);

	var result = "";

	for (var row = 1; row <= scene_row_count; row++) {
		if (row < lower_row_limit || row > upper_row_limit) continue;
		var segments = [], current_segment_start = -1000, current_segment_state = "NoHit";
		for (var zombie_x = center_x - range - zombie_x_width - zombie_x_offset - 1; 
			zombie_x <= center_x + range - zombie_x_offset + 1;
			zombie_x++) {
			// 对于396, 392, ..., x -= 1, 2, ...
			// 但如果是396.5, 392.5, ..., x-=0, 1, ...
			var zombie_y = 40 + (row - 1) * 85 + Math.floor(zombie_x < 400 ? (400 - (zombie_x + 0.5)) / 4 : 0);
			var zombie_y_alt = 40 + (row - 1) * 85 + Math.floor(zombie_x < 400 ? (400 - zombie_x) / 4 : 0);
			var norm_hit = hit(zombie_x, zombie_y_alt);
			var edge_hit = hit(zombie_x, zombie_y);
			var state = "";
			if (norm_hit && edge_hit) {
				state = "Hit";
			} else if (!norm_hit && edge_hit) {
				state = "ProbHit";
			} else if (norm_hit && !edge_hit) {
				state = "ProbNoHit";
			} else {
				state = "NoHit";
			}
			if (state != current_segment_state) {
				if (current_segment_state != "NoHit") {
					var seg = `[${current_segment_start},${zombie_x - 1}]`;
					if (current_segment_state == "ProbHit") {
						seg += "!";
						notation_ex = current_segment_start;
					} else if (current_segment_state == "ProbNoHit") {
						seg += "?";
						notation_ex = current_segment_start;
					}
					segments.push(seg);
				}
				current_segment_state = state;
				current_segment_start = zombie_x;
			}
		}

		if (segments.length == 0) {
			result += `第${row}行：炸不到<br>`;
		} else {
			result += `第${row}行：`;
			for (var i = 0; i < segments.length; i++) {
				result += segments[i];
				if (i != segments.length - 1) result += ", ";
				else result += "<br>";
			}
		}
	}

	if (notation_ex != -1000) {
		result += `! 表示当僵尸坐标取整数时（如${notation_ex}.000）炸不到，而不为整数时（如${notation_ex}.123）能炸到<br>`
		result += `? 表示当僵尸坐标取整数时能炸到，而不为整数时炸不到<br>`
	}

	document.getElementById("ranger_output").innerHTML = result;
}

function runRanger() {
	var scene = document.getElementById("ranger_scene_select").value;

	if (scene == "RE/ME") {
		runRoofRanger();
		return;
	}

	var explosive_row = Number(document.getElementById("ranger_input_row").value);
	var explosive_col = Number(document.getElementById("ranger_input_col").value);
	var explosive_type = document.getElementById("ranger_explosive_select").value;
	var zombie_type = document.getElementById("ranger_type_select").value;

	var center_x = 0, center_y = 0, range = 0;
	var lower_row_limit = 1, upper_row_limit = 6, scene_row_count = 6;
	var zombie_x_offset = 0, zombie_x_width = 0;
	var zombie_y_offset = 0, zombie_y_width = 0;
	var zombie_y_data = [];

	if (scene == "DE/NE") {
		center_y = [120, 220, 320, 420, 520][explosive_row - 1];
		zombie_y_data = [50, 150, 250, 350, 450];
		scene_row_count = 5;
	} else if (scene == "PE/FE") {
		center_y = [120, 205, 290, 375, 460, 545][explosive_row - 1];
		zombie_y_data = [50, 135, 220, 305, 290, 475];
		scene_row_count = 6;
	}

	if (explosive_type == "Cob") {
		center_x = Math.floor(explosive_col * 80);
		center_x -= center_x >= 7 ? 7 : 6;
		range = 115;
		lower_row_limit = explosive_row - 1;
		upper_row_limit = explosive_row + 1;
	} else if (explosive_type == "Cherry") {
		center_x = Math.floor(explosive_col) * 80;
		range = 115;
		lower_row_limit = explosive_row - 1;
		upper_row_limit = explosive_row + 1;
	} else if (explosive_type == "Doom") {
		center_x = Math.floor(explosive_col) * 80;
		range = 250;
		lower_row_limit = explosive_row - 3;
		upper_row_limit = explosive_row + 3;
	}
	
	[zombie_x_offset, zombie_x_width, zombie_y_offset, zombie_y_width] = getZombieCollision(zombie_type);

	var result = "";
	for (var row = 1; row <= scene_row_count; row++) {
		if (row < lower_row_limit || row > upper_row_limit) continue;
		var zombie_y = zombie_y_data[row - 1];
		var zombie_y_lower = zombie_y + zombie_y_offset;
		var zombie_y_upper = zombie_y_lower + zombie_y_width;
		var zombie_y_dist = 0;
		if (center_y < zombie_y_lower) {
			zombie_y_dist = zombie_y_lower - center_y;
		} else if (center_y > zombie_y_upper) {
			zombie_y_dist = center_y - zombie_y_upper;
		}
		if (zombie_y_dist > range) {
			result += `第${row}行：炸不到<br>`
		} else {
			var zombie_x_range = Math.floor(Math.sqrt(range * range - zombie_y_dist * zombie_y_dist));
			var zombie_x_left_range = zombie_x_range + zombie_x_offset + zombie_x_width;
			var zombie_x_right_range = zombie_x_range - zombie_x_offset;
			result += `第${row}行：[${center_x - zombie_x_left_range},${Math.min(800 - zombie_x_offset, center_x + zombie_x_right_range)}]<br>`
		}
	}

	document.getElementById("ranger_output").innerHTML = result;
}

function runRangerPlusX() {
	var explosive_type = document.getElementById("ranger_explosive_select").value;
	var explosive_col = Number(document.getElementById("ranger_input_col").value);
	if (explosive_type == "Cob") {
		document.getElementById("ranger_input_col").value = Math.min(Math.floor(explosive_col * 80 + 1) / 80, 9.9875);
	} else {
		document.getElementById("ranger_input_col").value = Math.min(Math.floor(explosive_col + 1), 9);
	}
	runRanger();
}

function runRangerMinusX() {
	var explosive_type = document.getElementById("ranger_explosive_select").value;
	var explosive_col = Number(document.getElementById("ranger_input_col").value);
	if (explosive_type == "Cob") {
		document.getElementById("ranger_input_col").value = Math.max(Math.floor(explosive_col * 80 - 1) / 80, 0.0125);
	} else {
		document.getElementById("ranger_input_col").value = Math.max(Math.floor(explosive_col - 1), 1);
	}
	runRanger();
}


function runRangerPlusY() {
	var scene = document.getElementById("ranger_scene_select").value;
	var explosive_row = Number(document.getElementById("ranger_input_row").value);
	document.getElementById("ranger_input_row").value = Math.min(Math.floor(explosive_row + 1), scene == "PE/FE" ? 6 : 5);
	runRanger();
}

function runRangerMinusY() {
	var explosive_row = Number(document.getElementById("ranger_input_row").value);
	document.getElementById("ranger_input_row").value = Math.max(Math.floor(explosive_row - 1), 1);
	runRanger();
}
