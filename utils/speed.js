var fast_speed_data = [
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.308, 0.200, 0.199, 0.199, 0.199, 0.199, 0.199,
    0.199, 0.199, 0.199, 0.199, 0.200, 0.199, 0.199, 0.199, 0.199, 0.206,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.199, 0.199,
    0.199, 0.199, 0.199, 0.199, 0.199, 0.200, 0.199, 0.199, 0.199, 0.199,
    0.199, 0.199, 0.199, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.302, 0.302,
    0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.303,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.303, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.303,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.303, 0.027, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028, 0.027,
    0.028, 0.027, 0.028, 0.034, 0.034, 0.034, 0.035, 0.034, 0.034, 0.035,
    0.034, 0.034, 0.035, 0.034, 0.034, 0.034, 0.035, 0.027, 0.028, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.028, 0.034, 0.034, 0.035, 0.034, 0.034, 0.035, 0.034, 0.034,
    0.034, 0.035, 0.034, 0.034, 0.035, 0.034, 0.034, 0.028, 0.027, 0.028,
    0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027,
    0.028, 0.027, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.165, 0.165, 0.164, 0.165,
    0.165, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.165, 0.164, 0.165,
    0.165, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.165, 0.164, 0.165,
    0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165,
    0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165,
    0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165,
    0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165,
    0.165, 0.164, 0.165, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165,
    0.165, 0.364, 0.363, 0.364, 0.364, 0.364, 0.364, 0.364, 0.364, 0.364,
    0.364, 0.363, 0.364, 0.364, 0.364, 0.364, 0.371, 0.371, 0.370, 0.371,
    0.371, 0.371, 0.371, 0.370, 0.371, 0.371, 0.371, 0.370, 0.371, 0.371,
    0.371, 0.371, 0.370, 0.371, 0.371, 0.371, 0.371, 0.370, 0.371, 0.371,
    0.371, 0.371, 0.370, 0.371, 0.371, 0.371, 0.370, 0.371, 0.371, 0.371,
    0.371, 0.370, 0.371, 0.371, 0.371, 0.371, 0.370, 0.371, 0.371, 0.371,
    0.370, 0.371, 0.371, 0.371, 0.371, 0.370, 0.371, 0.371, 0.371, 0.371,
    0.370, 0.371, 0.371, 0.371, 0.371, 0.308, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.302, 0.302, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.303, 0.302, 0.302, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.281, 0.039, 0.000, 0.000, 0.000, 0.000,
    0.034, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.037, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.057, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.010, 0.027, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028,
    0.013, 0.014, 0.014, 0.014, 0.013, 0.014, 0.014, 0.014, 0.013, 0.014,
    0.014, 0.013, 0.014, 0.014, 0.014, 0.027, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028,
    0.027, 0.028, 0.027, 0.301, 0.309, 0.309, 0.308, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.302, 0.302,
    0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.199, 0.199,
    0.199, 0.199, 0.199, 0.199, 0.199, 0.200, 0.199, 0.199, 0.199, 0.199,
    0.199, 0.199, 0.199, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.206, 0.205, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.205, 0.206, 0.206,
    0.206, 0.206, 0.199, 0.199, 0.200, 0.199, 0.199, 0.199, 0.199, 0.199,
    0.199, 0.199, 0.199, 0.199, 0.199, 0.200, 0.199, 0.206, 0.206, 0.205,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.303, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.028, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.034, 0.035, 0.034, 0.034,
    0.034, 0.035, 0.034, 0.034, 0.035, 0.034, 0.034, 0.035, 0.034, 0.034,
    0.034, 0.028, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.035, 0.034, 0.034, 0.035,
    0.034, 0.034, 0.035, 0.034, 0.034, 0.034, 0.035, 0.034, 0.034, 0.035,
    0.034, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.028, 0.027, 0.117, 0.116, 0.117, 0.117,
    0.116, 0.117, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.116, 0.117, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.116, 0.117, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.116, 0.117, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.116, 0.117, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.116, 0.117, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.116, 0.117, 0.117, 0.117, 0.116, 0.117, 0.117, 0.116, 0.117, 0.117,
    0.164, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.164, 0.165,
    0.165, 0.165, 0.164, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.164,
    0.165, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165,
    0.164, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.164, 0.165,
    0.165, 0.165, 0.164, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.164,
    0.165, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.164, 0.165, 0.165,
    0.165, 0.164, 0.165, 0.165, 0.164, 0.165, 0.165, 0.165, 0.164, 0.165,
    0.165, 0.165, 0.164, 0.165, 0.165, 0.364, 0.363, 0.364, 0.364, 0.364,
    0.364, 0.364, 0.363, 0.364, 0.364, 0.364, 0.364, 0.364, 0.363, 0.371,
    0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371,
    0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370,
    0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371,
    0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371,
    0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370,
    0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302, 0.309,
    0.309, 0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.000, 0.150,
    0.308, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.028, 0.027, 0.028, 0.027, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.027, 0.028, 0.027, 0.028, 0.013, 0.014, 0.014, 0.013, 0.014,
    0.014, 0.014, 0.013, 0.014, 0.014, 0.014, 0.013, 0.014, 0.014, 0.014,
    0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028,
    0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.204, 0.309,
    0.309, 0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309, 0.309,
    0.309, 0.309, 0.199, 0.206, 0.198, 0.199, 0.199, 0.198, 0.199, 0.199,
    0.199, 0.198, 0.199, 0.199, 0.199, 0.198, 0.204, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.205, 0.206,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.206, 0.205, 0.206, 0.206, 0.199, 0.200, 0.199, 0.199,
    0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.199, 0.200, 0.199,
    0.199, 0.206, 0.206, 0.206, 0.205, 0.206, 0.206, 0.206, 0.206, 0.206,
    0.206, 0.206, 0.206, 0.206, 0.206, 0.206, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.303, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.303,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.043, 0.302, 0.302, 0.027, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027,
    0.028, 0.027, 0.028, 0.034, 0.034, 0.034, 0.035, 0.034, 0.034, 0.034,
    0.035, 0.034, 0.034, 0.034, 0.034, 0.035, 0.034, 0.034, 0.028, 0.027,
    0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027,
    0.027, 0.028, 0.027, 0.035, 0.034, 0.034, 0.034, 0.034, 0.035, 0.034,
    0.034, 0.034, 0.035, 0.034, 0.034, 0.034, 0.035, 0.034, 0.027, 0.028,
    0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028,
    0.027, 0.028, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117,
    0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117,
    0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117,
    0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116,
    0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116,
    0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116,
    0.117, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.117,
    0.116, 0.117, 0.116, 0.117, 0.116, 0.117, 0.116, 0.165, 0.164, 0.165,
    0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165,
    0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165,
    0.164, 0.165, 0.164, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164,
    0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164,
    0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164,
    0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164,
    0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.164, 0.165, 0.357,
    0.364, 0.364, 0.364, 0.364, 0.363, 0.364, 0.364, 0.364, 0.364, 0.364,
    0.363, 0.364, 0.364, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371,
    0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370,
    0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371,
    0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371,
    0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370,
    0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371, 0.371, 0.370, 0.371,
    0.371, 0.370, 0.371, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.302, 0.303,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309, 0.309,
    0.309, 0.309, 0.009, 0.309, 0.308, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.111, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.026, 0.028, 0.027, 0.027, 0.028, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027,
    0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027, 0.027,
    0.014, 0.014, 0.013, 0.014, 0.014, 0.014, 0.013, 0.014, 0.014, 0.013,
    0.014, 0.014, 0.014, 0.013, 0.014, 0.027, 0.028, 0.027, 0.028, 0.027,
    0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027,
    0.027, 0.028, 0.027, 0.028, 0.027, 0.027, 0.028, 0.027, 0.028, 0.027,
    0.027, 0.028, 0.050, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309,
    0.308, 0.309, 0.309, 0.309, 0.309, 0.309, 0.302, 0.302, 0.302, 0.302,
    0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302, 0.302,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.309, 0.308, 0.309,
    0.309, 0.309, 0.309, 0.309, 0.309, 0.199, 0.199, 0.199, 0.290, 0.199,
    0.199, 0.199, 0.199, 0.198, 0.199, 0.199, 0.199, 0.198, 0.199, 0.199,
    0.199, 0.198, 0.199, 0.199, 0.205, 0.206, 0.206, 0.205, 0.206, 0.205,
    0.206, 0.206, 0.205, 0.206, 0.205, 0.206, 0.206, 0.205, 0.206, 0.205,
    0.206, 0.206, 0.205, 0.206, 0.205, 0.206, 0.206, 0.205, 0.206, 0.205,
    0.206, 0.206, 0.205, 0.206, 0.199, 0.198, 0.199, 0.199, 0.199, 0.198,
    0.199, 0.199, 0.199, 0.198, 0.199, 0.199, 0.199, 0.198, 0.199, 0.206,
    0.205, 0.206, 0.206, 0.205, 0.206, 0.205, 0.206, 0.206, 0.205, 0.212,
    0.302, 0.302, 0.302, 0.303, 0.302, 0.302, 0.302, 0.302, 0.302,
];

var slow_speed_data = [
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.193, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188,
    0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188,
    0.188, 0.187, 0.188, 0.188, 0.188, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.123,
    0.124, 0.124, 0.124, 0.124, 0.123, 0.124, 0.124, 0.124, 0.123, 0.124,
    0.124, 0.124, 0.124, 0.123, 0.124, 0.124, 0.124, 0.124, 0.123, 0.124,
    0.124, 0.124, 0.123, 0.128, 0.129, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.128, 0.128, 0.129, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.128, 0.129, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.124, 0.123, 0.124, 0.124, 0.124, 0.124, 0.123, 0.124, 0.124,
    0.124, 0.123, 0.124, 0.124, 0.124, 0.124, 0.123, 0.124, 0.124, 0.124,
    0.123, 0.124, 0.124, 0.124, 0.124, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.129, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.188,
    0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188,
    0.187, 0.188, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188,
    0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188,
    0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188,
    0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.188, 0.187, 0.017, 0.018, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.022, 0.021,
    0.022, 0.021, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021, 0.022,
    0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021,
    0.022, 0.021, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.022, 0.021, 0.021, 0.022,
    0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021,
    0.022, 0.021, 0.021, 0.022, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073,
    0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072,
    0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073,
    0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073,
    0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072,
    0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072,
    0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073,
    0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073,
    0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072,
    0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073,
    0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073,
    0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072,
    0.073, 0.073, 0.072, 0.073, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102,
    0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102,
    0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.103,
    0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103,
    0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103,
    0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102,
    0.102, 0.103, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102,
    0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102,
    0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.103,
    0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103,
    0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103,
    0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102,
    0.102, 0.103, 0.102, 0.226, 0.227, 0.226, 0.226, 0.226, 0.226, 0.227,
    0.226, 0.226, 0.226, 0.226, 0.227, 0.226, 0.226, 0.226, 0.226, 0.227,
    0.226, 0.226, 0.226, 0.226, 0.227, 0.226, 0.226, 0.230, 0.231, 0.230,
    0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230,
    0.231, 0.230, 0.231, 0.230, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231,
    0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.230,
    0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230,
    0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.230, 0.231, 0.230, 0.231,
    0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231,
    0.230, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230,
    0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.230, 0.231,
    0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231,
    0.230, 0.231, 0.230, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.188, 0.187, 0.188,
    0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187,
    0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187,
    0.188, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.193, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.126, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.006, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.005, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.017, 0.017, 0.018, 0.003, 0.000, 0.000, 0.000, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.009, 0.008, 0.009, 0.008,
    0.009, 0.008, 0.009, 0.009, 0.008, 0.009, 0.008, 0.009, 0.008, 0.009,
    0.008, 0.009, 0.008, 0.009, 0.009, 0.008, 0.009, 0.008, 0.009, 0.008,
    0.017, 0.017, 0.018, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.193, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.188,
    0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.124, 0.124, 0.124,
    0.123, 0.124, 0.124, 0.124, 0.123, 0.124, 0.124, 0.124, 0.124, 0.123,
    0.124, 0.124, 0.124, 0.123, 0.124, 0.124, 0.124, 0.124, 0.123, 0.124,
    0.124, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.129, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.129, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.124,
    0.124, 0.124, 0.124, 0.123, 0.124, 0.124, 0.124, 0.123, 0.124, 0.124,
    0.124, 0.124, 0.123, 0.124, 0.124, 0.124, 0.123, 0.124, 0.124, 0.124,
    0.124, 0.123, 0.124, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.129,
    0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128,
    0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.128, 0.188, 0.188, 0.188,
    0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188,
    0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188,
    0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188,
    0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188,
    0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188,
    0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188,
    0.188, 0.188, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017,
    0.018, 0.017, 0.017, 0.017, 0.017, 0.017, 0.021, 0.022, 0.021, 0.021,
    0.022, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021,
    0.021, 0.022, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021, 0.022,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018,
    0.017, 0.017, 0.017, 0.017, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021,
    0.021, 0.022, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.021, 0.022,
    0.021, 0.021, 0.022, 0.021, 0.021, 0.022, 0.021, 0.022, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018,
    0.017, 0.017, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072,
    0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073,
    0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073,
    0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072,
    0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072,
    0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073,
    0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073,
    0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072,
    0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073,
    0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073,
    0.072, 0.073, 0.072, 0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072,
    0.073, 0.073, 0.072, 0.073, 0.072, 0.073, 0.072, 0.073, 0.073, 0.072,
    0.073, 0.072, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.103,
    0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103,
    0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103,
    0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102,
    0.102, 0.103, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102,
    0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102,
    0.103, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103,
    0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103,
    0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.103, 0.102,
    0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102,
    0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102,
    0.103, 0.102, 0.103, 0.102, 0.102, 0.103, 0.102, 0.103, 0.102, 0.102,
    0.103, 0.226, 0.226, 0.226, 0.227, 0.226, 0.226, 0.226, 0.226, 0.227,
    0.226, 0.226, 0.226, 0.226, 0.227, 0.226, 0.226, 0.226, 0.226, 0.227,
    0.226, 0.226, 0.226, 0.226, 0.227, 0.230, 0.231, 0.230, 0.230, 0.231,
    0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231,
    0.230, 0.231, 0.230, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230,
    0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230,
    0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231,
    0.230, 0.231, 0.230, 0.231, 0.230, 0.230, 0.231, 0.230, 0.231, 0.230,
    0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230,
    0.231, 0.230, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231,
    0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.230, 0.231, 0.230,
    0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230, 0.231, 0.230,
    0.231, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.188, 0.188, 0.188, 0.188, 0.187,
    0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.188, 0.188,
    0.187, 0.188, 0.188, 0.188, 0.188, 0.187, 0.188, 0.188, 0.188, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.193, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.193, 0.192, 0.192, 0.192, 0.192, 0.192,
    0.192, 0.192, 0.192, 0.192, 0.192, 0.177, 0.000, 0.000, 0.000, 0.005,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.010, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000,
    0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.017, 0.018, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017,
    0.018, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.018, 0.017, 0.017, 0.008, 0.009, 0.008, 0.009, 0.008, 0.009,
    0.009, 0.008, 0.009, 0.008, 0.009, 0.008, 0.009, 0.008, 0.009, 0.008,
    0.009, 0.009, 0.008, 0.009, 0.008, 0.009, 0.008, 0.009, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018, 0.017,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.018,
    0.017, 0.017, 0.017, 0.017, 0.017, 0.017, 0.192, 0.192, 0.192,
];

var nextSegmentNo = 0;
var currentSegment = "";

function addSegment() {
    const segmentNo = nextSegmentNo + 1;
    nextSegmentNo += 1;
    const segmentId = `segment_${segmentNo}`;

    const segmentHTML = `
        <div class="segment" id="${segmentId}">
            <label for="${segmentId}_iceTime">用冰时机：</label>
            <input type="number" id="${segmentId}_iceTime" value="0" placeholder="0">
            <label for="${segmentId}_cobTime">激活时机：</label>
            <input type="number" id="${segmentId}_cobTime" value="316" placeholder="316">
            <label for="${segmentId}_throwTime">投掷时机：</label>
            <input type="text" id="${segmentId}_throwTime" value="w+1:316" placeholder="w+1:316">
            <label for="${segmentId}_fodderTime">垫材时机：</label>
            <input type="text" id="${segmentId}_fodderTime" value="" placeholder="">
            <label for="${segmentId}_fodderTime">计算时机：</label>
            <input type="text" id="${segmentId}_analyzeTime" value="w+3:316" placeholder="w+3:316">
            <button onclick="removeSegment('${segmentId}')">删除</button>
            <br/>
            <p id="${segmentId}_resultText">目前没有计算结果</p>
        </div>`;

    document.getElementById('segments').insertAdjacentHTML('beforeend', segmentHTML);
}

function removeSegment(segmentId) {
    const segment = document.getElementById(segmentId);
    segment.remove();
}

/**
 * 这是一个表示时间信息的结构。
 * @typedef {Object} WaveTime
 * @property {number?} wave - 波次
 * @property {number?} time - 时间
 * @property {boolean} valid - 是否有效
 * @property {boolean?} special - 是否特殊（投掷时间的植物激活）
 */

/**
 * 这是一个表示波次信息的结构。
 * @typedef {Object} WaveInfo
 * @property {number} ice - 用冰时间
 * @property {number} cob - 本波激活时间
 * @property {WaveTime} throw_info - 本波红眼投掷时间
 * @property {[WaveTime]} fodder_info - 本波红眼需要计算的时间
 * @property {[WaveTime]} analyze_info - 本波红眼需要计算的时间
 */

/**
 * 这是一个表示巨人信息的结构。
 * @typedef {Object} GigaInfo
 * @property {number} pos - 当前位置
 * @property {number} phase - 巨人相位，-1表示投掷中，-2表示锤垫中
 * @property {number} freeze - 剩余冰冻时间
 * @property {number} slow - 剩余减速时间
 * @property {number} throw - 投掷进度
 * @property {number} smash - 锤垫进度
 * @property {boolean} slow_skip - 下一帧是否需要跳过
 * @property {[number]} walk_formula - 用于验证的行走时间
 */

/**
 * 将形如 "w+1:316" 形式的字符串转为 WaveTime 结构。
 * @param {string} str - 输入字符串
 * @returns {WaveTime} - 转换结果
 */
function parseTime(str) {
    var special = false;
    if (str.endsWith("*")) {
        special = true;
        str = str.substring(0, str.length - 1);
    }

    if (str == "") return { valid: false };

    var [wave, time] = str.split(':');
    // 如果没有分号，可能是本波内的时机
    if (time === undefined) {
        if (!isNaN(Number(str))) return { wave: 0, time: Number(str), valid: true, special: special };
        else return { valid: false };
    }
    var wave_num = NaN, time_num = NaN;

    // wave 格式为 w or w+x
    if (wave.length < 1 || wave[0] != 'w') return { valid: false };
    else if (wave == "w") wave_num = 0;
    else if (wave.length < 2 || wave[1] != '+') return { valid: false };
    else wave_num = Number(wave.substring(2));

    // time 是一个数字
    time_num = Number(time);

    // 任一无效则返回 [-1, -1]
    if (isNaN(wave_num) || isNaN(time_num)) return { valid: false };
    else return { wave: wave_num, time: time_num, valid: true, special: special };
}

/**
 * 将形如 "w+1:316 w+3:316" 形式的字符串转为 WaveTime 结构的列表。
 * @param {string} str - 输入字符串
 * @returns {[WaveTime]} 转换结果
 */
function parseMultiTime(str) {
    var result = [];
    for (var i of str.split(" ")) {
        var t = parseTime(i);
        if (t.valid) result.push(t);
    }
    return result;
}

/**
 * 收集输入的信息，确定当前波次
 * @returns {{success: boolean, infos?: [WaveInfo]}}
 */
function collectInfo() {
    const segments = document.querySelectorAll('.segment');
    var infos = [];
    var fail = false;
    segments.forEach(segment => {
        var info = {
            ice: Number(document.getElementById(`${segment.id}_iceTime`).value),
            cob: Number(document.getElementById(`${segment.id}_cobTime`).value),
            throw_info: parseTime(document.getElementById(`${segment.id}_throwTime`).value),
            fodder_info: parseMultiTime(document.getElementById(`${segment.id}_fodderTime`).value),
            analyze_info: parseMultiTime(document.getElementById(`${segment.id}_analyzeTime`).value)
        };
        // throw_info无效时，可能是被瞬杀，不视作失败
        if (isNaN(info.ice) || isNaN(info.cob)) {
            document.getElementById(`${segment.id}_resultText`).textContent = "本波数据存在问题"
            fail = true;
        } else {
            document.getElementById(`${segment.id}_resultText`).textContent = ""
            infos.push(info);
        }
    });
    console.log(infos);
    if (fail || infos.length == 0) {
        return { success: false };
    } else {
        return { success: true, infos: infos };
    }
}

/**
 * 根据波次信息，提取对应波次遭遇的所有事件。
 * @param {{success: boolean, infos?: [WaveInfo]}} input_info 
 * @returns {[{type: string, time: number, info: string?}]}
 */
function extractEvents(input_info, current_wave_no) {
    var infos = input_info.infos.slice();
    // 提取出其中存在的事件
    // 支持以下事件：冰冻、投掷、锤垫（目前认为垫材秒铲）、统计
    var original_length = infos.length;
    var events = [];
    var waiting_events = [];
    var current_wave_start = 0;
    var current_info = infos[current_wave_no];
    var max_analyze = 0;
    // 提取投掷信息
    var throw_time = current_info.throw_info;
    if (throw_time.valid) {
        if (throw_time.special) waiting_events.push({ wave: throw_time.wave, time: throw_time.time, type: "throw-ash" });
        else waiting_events.push({ wave: throw_time.wave, time: throw_time.time, type: "throw" });
    }
    // 提取锤垫信息
    for (var t of current_info.fodder_info) {
        waiting_events.push({ wave: t.wave, time: t.time, type: "fodder" });
    }
    // 提取统计信息
    for (var t of current_info.analyze_info) {
        waiting_events.push({ wave: t.wave, time: t.time - (t.special ? 1 : 0), type: "analyze", info: `w+${t.wave}:${t.time}${t.special ? "*" : ""}` });
        max_analyze = Math.max(max_analyze, t.wave);
    }
    console.log(waiting_events);
    // 提取冰信息
    for (var i = current_wave_no; i <= current_wave_no + max_analyze; i++) {
        // 波次不足则补全
        if (i >= infos.length) infos.push(infos[i % original_length]);
        var info = infos[i];
        // 冰冻事件
        if (info.ice > 0) events.push({ type: "ice", time: current_wave_start + info.ice });
        // 将之前的换算为时间点
        for (var ev of waiting_events) {
            if (ev.wave == i - current_wave_no) {
                events.push({ type: ev.type, time: current_wave_start + ev.time, info: ev.info });
            }
        }
        current_wave_start += ((info.cob < 401) ? 601 : (info.cob + 200));
    }
    events.sort((a, b) => a.time - b.time);
    console.log(events);
    return events;
}

/**
 * 生成一个巨人信息
 * @param {number} pos - 巨人初始位置
 * @returns {GigaInfo}
 */
function generateGiga(pos) {
    return {
        // 当前位置
        pos: pos,
        // 巨人相位
        phase: 0,
        // 剩余冰冻时间
        freeze: 0,
        // 剩余减速时间
        slow: 0,
        // 投掷进度
        throw: 0,
        // 锤垫进度
        smash: 0,
        // 这里采用简化算法：减速时，第一帧原速运动，第二帧无动作
        // 此处记录下一个减速帧是否使用此算法
        slow_skip: false,
        // 计算行走时间用于验证
        walk_formula: [0]
    };
}

/**
 * 步进一步巨人状态
 * @param {GigaInfo} giga 
 * @param {boolean} slow
 */
function gigaStep(giga, slow) {
    // 垫材与激活的测试：
    // 灰烬激活时，垫材在激活上一帧种植，先投掷后锤垫
    // 炮激活时，垫材在激活上一帧种植，先锤垫后投掷
    // 灰烬激活本帧：结算植物（灰烬激活）-结算僵尸（同时激活+索敌，选投掷）-结算炮弹（无）
    // 炮激活本帧，垫材tick为208，激活tick为143
    // 灰烬激活本帧：结算植物（无）-结算僵尸（索敌，选锤垫）-结算炮弹（激活）
    // 本帧植物没有什么好结算的
    // 结算僵尸
    // 两个减速tick减1
    if (giga.freeze > 0) giga.freeze -= 1;
    if (giga.slow > 0) giga.slow -= 1;
    // 非冰冻状态下，进行索敌
    if (giga.freeze == 0) {
        if (giga.phase >= 0) {
            if (giga.throw == 142) giga.phase = -1;
            else if (giga.smash == 208) giga.phase = -2;
        }
    }
    // 非冰冻、非跳过状态下，进行移动
    if (giga.freeze == 0) {
        if (!(giga.slow && giga.slow_skip)) {
            if (giga.phase >= 0) {
                if (slow) giga.pos -= slow_speed_data[giga.phase];
                else giga.pos -= fast_speed_data[giga.phase];
                giga.walk_formula[giga.walk_formula.length - 1] += 1;
                giga.phase += 1;
            } else if (giga.phase == -1) {
                giga.throw -= 1;
                if (giga.throw == 0) {
                    giga.phase = 0;
                    if (giga.walk_formula[giga.walk_formula.length - 1] != 0) {
                        giga.walk_formula.push(0);
                    }
                }
            } else if (giga.phase == -2) {
                giga.smash -= 1;
                if (giga.smash == 0) {
                    giga.phase = 0;
                    if (giga.walk_formula[giga.walk_formula.length - 1] != 0) {
                        giga.walk_formula.push(0);
                    }
                }
            }
            if (giga.slow) giga.slow_skip = true;
        } else {
            giga.slow_skip = false;
        }
    }
    // 结算下一帧植物
    if (giga.phase >= 0 && giga.throw > 142) giga.throw -= 1;
    if (giga.phase >= 0 && giga.smash > 208) giga.smash -= 1;
}

function calculateOne(input_info, segment_id, segment_no) {
    const events = extractEvents(input_info, segment_no);

    var analyze = false;
    var analyze_str = "";
    var result_str = "";
    var fast_giga = generateGiga(845);
    var slow_giga = generateGiga(854);

    // 为计算可以砸扁举锤坐标为多少的植物，对每个坐标维护一个计数器，只在冻结时不动作
    // 当冰冻事件与投掷+106cs(-36cs)事件同时发生时，进入ice3
    // 投掷共142cs，锤垫共208cs
    var smash_countdown_for_pos = [];
    for (var i = 0; i <= 800; i++) {
        smash_countdown_for_pos.push(-1);
    }
    var max_event_time = 0;
    if (events.length > 0) max_event_time = events[events.length - 1].time;
    // 巨人需要一帧索敌垫材，xcs的垫x+1cs才举锤
    for (var time = 1; time <= max_event_time; time++) {
        analyze = false;
        analyze_str = "";
        // 先查看当前帧事件
        for (var evt of events) {
            if (time == evt.time) {
                switch (evt.type) {
                    case "throw":
                        // 炮激活时，先结算僵尸再结算炮弹，因此下帧才开始投掷动作
                        fast_giga.throw = 143;
                        slow_giga.throw = 143;
                        break;
                    case "throw-ash":
                        // 灰烬激活时，先结算植物再结算僵尸，本帧就开始投掷动作
                        fast_giga.throw = 142;
                        slow_giga.throw = 142;
                        break;
                    case "fodder":
                        // 似乎因为僵尸需要一帧索敌，下一帧才会开始举锤
                        fast_giga.smash = 209;
                        slow_giga.smash = 209;
                        break;
                    case "ice":
                        // 减速信息与投掷信息全场同步，无需考虑
                        if (fast_giga.throw == 36 && (!fast_giga.slow || fast_giga.slow_skip)) {
                            fast_giga.throw += 142;
                        }
                        if (fast_giga.slow) {
                            fast_giga.freeze = 300;
                            slow_giga.freeze = 400;
                        } else {
                            fast_giga.freeze = 400;
                            slow_giga.freeze = 600;
                        }
                        fast_giga.slow = slow_giga.slow = 2000;
                        break;
                    case "analyze":
                        analyze = true;
                        analyze_str = evt.info;
                        break;
                }
            }
        }
        gigaStep(fast_giga, false);
        gigaStep(slow_giga, true);
        if (analyze) {
            var fast_safe = 845;
            for (var i = 0; i < fast_giga.walk_formula.length; i++) {
                if (i == fast_giga.walk_formula.length - 1) {
                    for (var j = 0; j < fast_giga.walk_formula[i] - 134; j++) {
                        fast_safe -= fast_speed_data[j];
                    }
                } else {
                    for (var j = 0; j < fast_giga.walk_formula[i]; j++) {
                        fast_safe -= fast_speed_data[j];
                    }
                }
            }
            result_str += `(${analyze_str}: [${Math.round(fast_giga.pos * 1000) / 1000}, ${Math.round(slow_giga.pos * 1000) / 1000}] `;
            result_str += `WF=[${fast_giga.walk_formula}] `;
            result_str += `SAFE=${Math.round(fast_safe * 1000) / 1000}) `;
        }
    }
    document.getElementById(`${segment_id}_resultText`).textContent = result_str;
}

function calculateAll() {
    const input_info = collectInfo();
    if (!input_info.success) return;
    const segments = document.querySelectorAll('.segment');
    var segment_no = 0;
    segments.forEach(segment => {
        calculateOne(input_info, segment.id, segment_no);
        segment_no += 1;
    });
}

function runSplitter() {
    var total_time = Number(document.getElementById("splitter_input").value);
    var walk_len = [{ walk: 0, split: [0] }];
    for (var i = 1; i <= total_time; i++) {
        walk_len.push({ walk: walk_len[i - 1].walk + fast_speed_data[i - 1], split: [i] });
    }
    var result = `(FC: 0, WD:${Math.round(walk_len[total_time].walk * 1000) / 1000}) `;
    var last_split_len = walk_len, now_split_len = []
    for (var fodder_count = 1; fodder_count * 208 < total_time; fodder_count++) {
        for (var current_time = 0; current_time <= total_time - fodder_count * 208; current_time++) {
            var min_val = 1000, min_val_i = -1;
            for (var i = 0; i <= current_time; i++) {
                var val = last_split_len[i].walk + walk_len[current_time - i].walk;
                if (val < min_val) {
                    min_val = val;
                    min_val_i = i;
                }
            }
            var item = { walk: min_val, split: last_split_len[min_val_i].split.slice() };
            item.split.push(current_time - min_val_i);
            now_split_len.push(item);
        }
        result += `(FC:${fodder_count}, `;
        result += `WD:${Math.round(now_split_len[total_time - fodder_count * 208].walk * 1000) / 1000}, `
        result += `SP:${now_split_len[total_time - fodder_count * 208].split}) `;
        last_split_len = now_split_len;
        now_split_len = [];
    }
    document.getElementById("splitter_output").textContent = result;
}
